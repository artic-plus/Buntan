cmake_minimum_required (VERSION 3.2)
set(CMAKE_CXX_FLAGS "-march=native -O3 -g")
set(CMAKE_CXX_STANDARD 20)
project(starpu_tfhe CXX)


find_package(OpenMP)
if(OpenMP_FOUND)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
endif()

find_package(PkgConfig)
pkg_check_modules(STARPU REQUIRED starpu-1.3)
if (STARPU_FOUND)
include_directories (${STARPU_INCLUDE_DIRS})
link_directories (${STARPU_STATIC_LIBRARY_DIRS})
link_libraries (${STARPU_STATIC_LIBRARIES})
else (STARPU_FOUND)
message(FATAL_ERROR "StarPU not found")
endif()

add_library(node_cls SHARED nodetypes.cpp)
target_link_libraries(node_cls PUBLIC tfhe++)
target_compile_options(node_cls PUBLIC -lmpi -Wall  -rdynamic)
target_link_options(node_cls PUBLIC -lmpi -Wall)
target_include_directories(node_cls PUBLIC ${CMAKE_SOURCE_DIR}/include)
target_include_directories(node_cls PUBLIC ${CMAKE_SOURCE_DIR}/thirdparties/TFHEpp)
set_property(TARGET node_cls PROPERTY POSITION_INDEPENDENT_CODE ON)


add_library(utils_wrap STATIC utils_wrap.cpp)
target_link_libraries(utils_wrap PUBLIC tfhe++)
target_include_directories(utils_wrap PUBLIC ${CMAKE_SOURCE_DIR}/include)
target_include_directories(utils_wrap PUBLIC ${CMAKE_SOURCE_DIR}/thirdparties/TFHEpp)


if(plain_mode)
  add_compile_definitions(plain_mode)
endif()
if(dump_mode)
  add_compile_definitions(dump_mode)
endif()
if(use_simple_FF)
  add_compile_definitions(use_simple_FF)
endif()
if(perf_measure)
  add_compile_definitions(perf_measure)
endif()
if(use_lvl0)
  add_compile_definitions(use_lvl0)
endif()
